FROM --platform=$BUILDPLATFORM node:16-alpine AS build-client
# install simple http server for serving static content
#RUN npm install -g http-server
# make the 'app' folder the current working directory
WORKDIR /app/client
# copy both 'package.json' and 'package-lock.json' (if available)
COPY client/package*.json ./
# install project dependencies
RUN npm install
# copy project files and folders to the current working directory (i.e. 'app' folder)
COPY client/ ./
# build app for production with minification
RUN npm run build


FROM mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build-server
WORKDIR /app

COPY --from=build-client /app/client/dist ./wwwroot/

# Copy csproj and restore as distinct layers
COPY server/*.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY server/ ./
RUN dotnet publish -c Release -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1
WORKDIR /app
COPY --from=build-server /app/out .
ENTRYPOINT ["dotnet", "BudgetPanel.dll"]

VOLUME ["/app/db"]

EXPOSE 80

HEALTHCHECK --interval=1m --timeout=3s \
    CMD curl -f http://localhost/api/ || exit 1
